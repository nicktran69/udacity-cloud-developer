org: nicktran
app: serverless-udacity-pj-capstone
service: serverless-udacity-pj-capstone

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
 # lambdaHashingVersion: '20201221'
  stage: dev
  region: ap-southeast-1

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    PROJECT_NAME: serverless-udacity-pj-capstone
    ACCOUNTS_TABLE: serverless-udacity-pj-capstone-${self:provider.stage}
    S3_BUCKET_NAME: udagram-pj-capstone-${self:provider.stage}

  logs:
    #Enable API Gateway logs
   restApi: true

  iam:
   role:
     statements:
       - Effect: Allow
         Action:
           - xray:PutTelemetryRecords
         Resource: "*"

custom:
  documentation:
    api:
      info:
        version: '1.0.0'
        title: My API
        description: This is my API
      tags:
        -
          name: User
          description: User Management
    models:
      - name: CreateAccountModel
        contentType: "application/json"
        schema: ${file(models/create-account-model.json)}
      - name: UpdateAccountModel
        contentType: "application/json"
        schema: ${file(models/update-account-model.json)}
      - name: 400JsonResponse
        contentType: "application/json"
        schema:
          type: object
          properties:
            message:
              type: string
            statusCode:
              type: number
  commonModelSchemaFragments:
    MethodResponse400Json:
      statusCode: '400'
      responseModels:
        "application/json": 400JsonResponse


functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetAccounts:
    handler: src/lambda/http/getAccounts.handler
    events:
      - http:
          method: get
          path: accounts
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-get-account-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ACCOUNTS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  CreateAccount:
    handler: src/lambda/http/createAccount.handler
    events:
      - http:
          documentation:
            summary: "Create a new account item"
            description: "Create a new account item"
            requestModels:
              "application/json": CreateAccountModel
          method: post
          path: accounts
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-create-account-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ACCOUNTS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  UpdateAccount:
    handler: src/lambda/http/updateAccount.handler
    events:
      - http:
          method: patch
          path: accounts/{accountId}
          cors: true
          authorizer: Auth
          documentation:
            summary: "Update a account item"
            description: "Update a account item"
            requestModels:
              "application/json": UpdateAccountModel
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-update-account-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ACCOUNTS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  DeleteAccount:
    handler: src/lambda/http/deleteAccount.handler
    events:
      - http:
          method: delete
          path: accounts/{accountId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-delete-account-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ACCOUNTS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: accounts/{accountId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-s3-upload-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
          - xray:PutTraceSegments 
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*

resources:
  Resources:
    # account: Add any necessary AWS resources
    AccountsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: accountId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: accountId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ACCOUNTS_TABLE}
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 300

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH,PUT'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi 

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*'
        Bucket: !Ref AttachmentsBucket